{"name":"Sbwt","tagline":"A highly hardware-acceleration friendly k-ordered FM-index for exact string matching, overlap graph construction for de novo assembly, and more. ","body":"Sbwt aligner\r\n=========\r\nSbwt aligner is a Burrowsâ€“Wheeler transform (BWT) based fast aligner specialized in parallelized indexing from Next Generation Sequencing data.  \r\n\r\nSbwt aligner is released under GPLv2 with additional restriction so that is only applicable to individuals and non-profits and that any for-profit company must purchase a different license.    \r\n\r\n##INSTALL\r\n*Only 64 bits systems are able to compile and run Sbwt aligner.\r\n    \r\n### Run the binary directly without installation \r\nPlease try the precompiled binaries first, most of the linux systems should be able to run Tailor without any troubles.\r\n```bash\r\nbin/sbwt_linux \t\t# for linux\r\n```\r\n\r\n### Compile from the source code\r\n#### Install the dependencies\r\n- 1.1 Relative recent C++ compiler that support most features of C++11. We recommend [GCC](http://gcc.gnu.org/).\r\n- 1.2 [Boost](http://www.boost.org/users/download/)\r\n- 1.3 [CMake](http://www.cmake.org/)\r\n\r\n#### Get the latest version of the software\r\n```bash\r\ngit clone git@github.com:jhhung/sBWT.git\r\n```\r\n\r\n#### Enter the folder sBWT and:\r\n- Set environmental variable `$BOOST_ROOT` to the directory of boost if CMake cannot find boost automatically;\r\n- Set environmental variable `$CC` and `$CXX` to the gcc/g++ compiler you want to use.\t\r\n```bash\r\ncmake .\r\n```\r\n\r\n#### Compile the software by typing:\r\n```bash\r\nmake\r\n```\r\n\r\n#### troubleshooting\r\n- If you got linker error, it is possible that the default library in the lib/ is not suitable to your platform. \r\n There are one librarie for linux available, rename the file that fit the best to \"libabwt_table.a\",\r\n and retype \r\n```bash\r\nmake\r\n```\r\n\t\r\n##USAGE\r\n\r\n#### Build genomic index (similar to bowtie-build)\r\n```bash\r\nsbwt build -i [genome.fa] -p [ouput prefix]\r\n```\r\n\r\n#### Mapping \r\n```bash\r\nsbwt map -i [reads.fq] -p [index prefix] -o [output.sam]\r\n```\r\n\r\nGPU version\r\n===========\r\n\r\n##Install\r\nIn sbwtCuda direction\r\n```bash\r\nbin/com_rf\t#for mapping\r\nbin/com_tbl\t#for indexing\r\n```\r\n### Compile from the source code\r\n#### Install the dependencies\r\n- 1.1 Relative recent C++ compiler that support most features of C++11. We recommend [GCC](http://gcc.gnu.org/).\r\n- 1.2 [Boost](http://www.boost.org/users/download/)\r\n- 1.3 CUDA's Compute Capability 2.0, Tesla K20 is recommended\r\n\r\n\r\n#### Enter the folder sbwtCuda and:\r\n- Set environmental variable `$CC` and `$CXX` to the gcc/g++ compiler you want to use.\r\n```bash\r\nmake com_rf\t\t#for mapping\r\nmake com_tbl\t#for indexing\r\n```\r\n\r\n##USAGE\r\n```bash\r\ncom_tbl [reference.fa] xxx 3125 128 4000000\t\t\t\t\t#for indexing\r\n#the bwt file will generate in local diretion where you run the program.\r\n\r\ncom_rf xxx [reads.fq] 3125 128 [reads number] > [output.sam] \t#for mapping\r\n#the \"xxx\" and numeric parameter is unessesery please just copy it.\r\n```\r\n\r\n\r\n##Contact\r\n- Jui-Hung Hung <juihunghung@gmail.com>\r\n- Min-Te Chou <poi5305@gmail.com>\r\n- Ting-Wei Hong <thestyle1202@gmail.com>\r\n- Chia-Hua Chang <CHChang810716@gmail.com>\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}